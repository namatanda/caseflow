name: Deploy Containers

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  backend-tests:
    name: Backend Quality Gate
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: courtflow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test -d courtflow_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://test:test@localhost:5432/courtflow_test
      REDIS_URL: redis://localhost:6379/1
      JWT_SECRET: test-jwt-secret-key-that-is-long-enough-for-testing-purposes
      JWT_EXPIRES_IN: 1h
      JWT_REFRESH_EXPIRES_IN: 7d
      API_VERSION: v1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test; do
            echo "Waiting for postgres..."
            sleep 2
          done
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      - name: Generate Prisma client
        run: |
          cd backend
          npx prisma generate
      - name: Run backend lint
        run: |
          cd backend
          npm run lint
      - name: Run backend tests
        run: |
          cd backend
          npm run test

  frontend-tests:
    name: Frontend Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Run frontend lint
        run: |
          cd frontend
          npm run lint
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --run
      - name: Build frontend bundle
        run: |
          cd frontend
          npm run build

  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs:
      - backend-tests
      - frontend-tests
    env:
      REGISTRY: ghcr.io
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare image names
        id: prep
        run: |
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "backend_image=${owner}/caseflow-backend" >> "$GITHUB_OUTPUT"
          echo "frontend_image=${owner}/caseflow-frontend" >> "$GITHUB_OUTPUT"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Backend image metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.prep.outputs.backend_image }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ steps.prep.outputs.backend_image }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ steps.prep.outputs.backend_image }}:buildcache,mode=max

      - name: Frontend image metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.prep.outputs.frontend_image }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build & push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ steps.prep.outputs.frontend_image }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ steps.prep.outputs.frontend_image }}:buildcache,mode=max

      - name: Upload deployment summary
        run: |
          echo "### Images pushed" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.backend_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \
            ${{ env.REGISTRY }}/${{ steps.prep.outputs.frontend_image }}" >> $GITHUB_STEP_SUMMARY
