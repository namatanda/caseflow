# CourtFlow - Full Stack Application
# Root docker-compose file to run backend + frontend + services
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18.0
    container_name: courtflow-postgres
    environment:
      - POSTGRES_DB=courtflow_db
      - POSTGRES_USER=courtflow
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=trust
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./backend/scripts/setup-pg-auth.sh:/docker-entrypoint-initdb.d/02-setup-auth.sh:ro
      - ./backend/config/pg_hba.conf:/usr/share/postgresql/18/pg_hba.conf.sample:ro
    networks:
      - courtflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U courtflow -d courtflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache and Session Store
  redis:
    image: redis:latest
    container_name: courtflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backend/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - courtflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: courtflow-backend:optimized
    container_name: courtflow-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://courtflow:password@postgres:5432/courtflow_db
      - DIRECT_DATABASE_URL=postgresql://courtflow:password@postgres:5432/courtflow_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-at-least-32-characters-long-for-development
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_EXPIRES_IN=7d
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:9002,http://localhost
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
      - MAX_FILE_SIZE=10485760
      - API_VERSION=v1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/backups:/app/backups
    networks:
      - courtflow-network
    restart: unless-stopped

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: courtflow-frontend:optimized
    container_name: courtflow-frontend
    ports:
      - "80:80"
      - "3000:80"
    environment:
      - VITE_API_URL=http://localhost:3001/api/v1
      - VITE_WS_URL=ws://localhost:3001/ws
    depends_on:
      - backend
    networks:
      - courtflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: courtflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - backend
    networks:
      - courtflow-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: courtflow-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - courtflow-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  courtflow-network:
    driver: bridge
